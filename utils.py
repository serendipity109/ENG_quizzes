from elasticsearch import Elasticsearch
from elasticsearch import helpers
import string
import json
import re


class ES(Elasticsearch):
    def __init__(self):
        # Password for the 'elastic' user generated by Elasticsearch
        ELASTIC_PASSWORD = "qz666"
        # Create the client instance
        self.es = Elasticsearch(
            "http://localhost:9200",
            basic_auth=("elastic", ELASTIC_PASSWORD),
            verify_certs=False,
            ssl_show_warn=False
        )
        print(es.info())
        self.create()
    
    def create(self):
        body = {
            "settings": {
                "number_of_shards": 3,
                "number_of_replicas": 2
            },
            "mappings": {
                "properties": {
                    "index": {
                        "type": "keyword"
                    },
                    "content": {
                        "type": "text"
                }
            }
            }
        }
        self.es.indices.create(index='english', body=body)
        
    def load_from_corpus(self, path='corpus.json'):
        def check(_id):
            query = {
                "query": {
                    "bool": {
                        "must": {
                            "term": {
                                "index": _id
                            }
                        }
                    }
                }
            }
            result = es.search(index='english', body=query)
            return result['hits']['total']['value'] 
    
        with open(path, 'r')as f:
            data = f.read()
            corpus = eval(data)
            f.close()

        def load_datas():
            actions = list()
            for idx in corpus.keys():
                flag = 0 # cloze
                for i, parag in enumerate(corpus[idx]):
                    parag = parag.replace("'s", " is").replace("'re", " are").replace("'t", " not")
                    parag = re.sub(r'[\u0080-\uffef]', '', parag)
                    parag = re.sub(r'[^a-zA-Z]', ' ', parag)
                    if len(parag) == 0:
                        flag = 1 # reading
                        n_cloze = i
                        continue
                    if flag == 0: # cloze
                        index = 'h-' + idx + '-c-' + str(i)
                    else: # reading
                        index = 'h-' + idx + '-r-' + str(i-n_cloze)
                    if check(index) > 0:
                        continue
                    actions.append({
                        "_index": "english",
                        "_op_type": "index",
                        "_source": {
                            "index": index,
                            "content": parag
                        }
                    })
            return actions
        data = load_datas()
        helpers.bulk(self.es, data)
        
    def get_corpus(self, input='康1-1~1-3'):
        def read_kw(path):
            with open(path, 'r')as f:
                lines = f.readlines()
                f.close()
            kws = []
            for line in lines:
                if len(line) > 0 and (line[0] in string.ascii_uppercase\
                                      or line[0] in string.ascii_lowercase):
                    kws.append(line.replace('\n', ''))
            return kws
        kws = read_kw(f'./正在學的單字/{input}.txt')
        return kws
    
    def inference(self, input):
        hm = {}
        def get_query(content, q):
            if q == 'q1':
                query = {"query": 
                         {"bool": 
                          {"must":
                           {"term": 
                            {"content": content
                                }
                            }
                        }
                    }
                }
            elif q == 'q2':
                query = {"query": 
                         {"match_phrase":
                          {"content": content
                    }
                  }
                }
            return query

        # result = es.search(index='english', body=get_query('zebras', 'q1'), size=1000) size is maximun number of hits

        for kw in kws:
            if " " in kw:
                q = 'q2'
            else:
                q = 'q1'
            result = es.search(index='english', body=get_query(kw, q), size=1000)
            for hit in result['hits']['hits']:
                if hit['_id'] in hm:
                    hm[hit['_id']].append(kw)
                else:
                    hm[hit['_id']] = [kw]
    
def annator(inp):
    inp = inp.replace(':', ' ').replace(')', ' ').replace('(', ' ')
    inp = inp.strip()
    return inp